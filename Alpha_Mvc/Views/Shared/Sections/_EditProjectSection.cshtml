 @model ProjectsViewModel


 <div class="modal" id="editProjectModal"> 

     <div class="modal-container" id="modalContent"> 
         <div class="top"> 
             <h3>Edit Project</h3> 
             <button type="button" class="exit" data-close="true"> 
                 <i class="fa-solid fa-xmark"></i> 
             </button> 
         </div> 

         <form class="form" method="post" action="/Project/EditProject" enctype="multipart/form-data" novalidate> 
             <div class="image-preview-container"> 
                 <div id="edit-proj-circle" class="border-circle show"> 
                     <div class="camera" id="edit-camera-project"> 
                         <i class="fa-solid fa-camera"></i> 
                     </div> 
                 </div> 

                 <img id="edit-proj-image-preview" class="image-preview" src="#" /> 
             </div> 

             <div class="form-inputs-container"> 
                 <div class="form-group"> 
                     <label asp-for="@Model.EditProjectForm.Picture" hidden></label>
                    <input id="add-proj-image-input" asp-for="@Model.EditProjectForm.Picture" class="image-input" accept="image/*" hidden />
                    <span asp-validation-for="@Model.EditProjectForm.Picture"></span>
                </div> 

                 <div class="input-container">
                    <label class="label" asp-for="@Model.EditProjectForm.ProjectTitle">Project Name</label>
                    <input type="text" class="input" asp-for="@Model.EditProjectForm.ProjectTitle" name="ProjectTitle">
                    <span asp-validation-for="@Model.EditProjectForm.ProjectTitle"></span>
                </div> 

                 <div class="input-container">
                    <label class="label" asp-for="@Model.EditProjectForm.ClientName">Client Name</label>
                    <input type="text" class="input" asp-for="@Model.EditProjectForm.ClientName" name="ClientName">
                    <span asp-validation-for="@Model.EditProjectForm.ClientName"></span>
                </div> 
                 <div class="input-container">
                    <label class="label" asp-for="@Model.EditProjectForm.Description">Description</label>
                    <textarea type="text" class="input text-area" asp-for="@Model.EditProjectForm.Description"></textarea>
                    <span asp-validation-for="@Model.EditProjectForm.Description"></span>
                </div> 
                 <div class="form-group"> 
                     <div class="start">
                        <label class="label" asp-for="@Model.EditProjectForm.StartDate">Start Date</label>
                        <input type="date" class="input" asp-for="@Model.EditProjectForm.StartDate">
                        <span asp-validation-for="@Model.EditProjectForm.StartDate"></span>
                    </div> 
                     <div class="end">
                        <label class="label" asp-for="@Model.EditProjectForm.EndDate">End Date</label>
                        <input type="date" class="input" asp-for="@Model.EditProjectForm.EndDate">
                        <span asp-validation-for="@Model.EditProjectForm.EndDate"></span>
                    </div> 
                 </div> 
                 <div class="input-container"> 
                     <label class="label">Members</label> 
                     <div id="tag-members" class="search-container"> 
                         <input type="text" id="member-search" class="members-search-input" placeholder="Add members..." /> 
                         <input type="hidden" id="SelectedIds" name="SelectedIds" /> 

                         <button type="button" class="search-button" for="search-input"> 
                             <img src="/images/Icons/Search.svg" /> 
                         </button> 

                         <div id="member-results" class="search-results"></div> 
                     </div> 
                 </div> 
                 <div class="input-container">
                    <label class="label" asp-for="@Model.EditProjectForm.Budget">Budget</label>
                    <input type="text" class="input budget" asp-for="@Model.EditProjectForm.Budget">
                    <span asp-validation-for="@Model.EditProjectForm.Budget"></span>
                </div> 
             </div> 
             <button type="submit" class="btn"> 
                 Save 
             </button> 
         </form> 
     </div> 
 </div> 

 @await Html.PartialAsync("_ValidationScriptsPartial")

<script>
    const preSelectedMembers = @Html.Raw(Json.Serialize(ViewBag.AllMembers));
  
     
     initTagSelector({ 
         containerId: 'tag-members', 
         inputId: 'member-search', 
         resultsId: 'member-results', 
         searchUrl: (query) => '@Url.Action("SearchMembers", "Member")' + '?term=' + encodeURIComponent(query), 
         displayName: 'fullName', 
         displayEmail: 'email', 
         imageProperty: 'imageUrl', 
         tagClass: 'member', 
         emptyMessage: 'No members found.', 
         preSelected: preSelectedMembers
     }); 

     document.addEventListener("DOMContentLoaded", () => { 
         const camera = document.querySelector("#edit-camera-project"); 
         const imageInput = document.querySelector("#edit-proj-image-input"); 

         if (!imageInput) return; 

         camera.addEventListener("click", () => { 
             imageInput.click(); 
         }); 

         imageInput.addEventListener("change", (e) => { 
             const image = e.target.files[0]; 
             const circle = document.querySelector("#edit-proj-circle"); 
             const imagePreview = document.querySelector("#edit-proj-image-preview"); 

             if (image) { 
                 const reader = new FileReader(); 

                 reader.onload = (e) => { 
                     imagePreview.src = e.target.result; 
                     circle.classList.remove('show'); 
                     imagePreview.classList.add('show'); 
                 }; 

                 reader.readAsDataURL(image); 
             } 
             else { 
                 circle.classList.add('show'); 
                 imagePreview.classList.remove('show'); 
             } 
         }); 


         document.addEventListener('click', (e) => { 
             const modals = document.querySelectorAll('.modal'); 
             modals.forEach(modal => { 
                 const modalContainer = modal.querySelector('.modal-container'); 
                 const exitButton = modal.querySelector('[data-close="true"]'); 

                 if (!modalContainer.contains(e.target) || exitButton.contains(e.target)) { 
                     modal.classList.remove('show'); 

                     modal.querySelectorAll('form').forEach(form => { 
                         form.reset(); 

                         const imagePreview = form.querySelector('#edit-proj-image-preview'); 
                         if (imagePreview) { 
                             imagePreview.src = ''; 
                             imagePreview.classList.remove('show'); 
                         } 

                         const container = form.querySelector('#edit-proj-circle'); 
                         if (container) { 
                             container.classList.add('show'); 
                         } 

                     }); 
                 } 
             }); 
         }); 

     }); 

 </script> 